version: '3.0'

services:
  gateway:
    image: functions/gateway:0.6.15
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      dnsrr: 'true'
    deploy:
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
    ports:
      - 8080:8080
    networks:
      - functions

  ftrigger-kafka:
    image: mrkcse/ftrigger:latest
    command: kafka-trigger
    environment:
      NUMBER_OF_CONSUMERS_PER_TOPIC: 20
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MAX_POLL_RECORDS: 10000
      POLL_TIME_OUT: 1000
      MAX_WAIT_MSG_LIST: 1000
      MAX_RECORDS_MSG_LIST: 5000
      AUTO_COMMIT_INTERVAL_MS: 5000
      FETCH_MAX_WAIT_MS: 1000
      AUTO_OFFSET_RESET: earliest
    networks:
      - functions
      - streaming
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'

  echoit:
    image: functions/alpine:health
    labels:
      function: "true"
    environment:
      fprocess: "cat"
      no_proxy: "gateway"
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
          - 'node.platform.os == linux'
      labels:
        ftrigger.kafka: "true"
        ftrigger.kafka.topic: "mrkcse.test"
        ftrigger.kafka.data: "key-value"
    networks:
      - functions

  sleepfunction:
    image: mrkcse/myopenfasssimulator:latest
    labels:
      function: "true"
    environment:
      fprocess: "python handler.py"
      no_proxy: "gateway"
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
          - 'node.platform.os == linux'
      labels:
        ftrigger.kafka: "true"
        ftrigger.kafka.topic: "mrkcse.test"
        ftrigger.kafka.data: "key-value"
    networks:
      - functions

  prometheus:
    image: functions/prometheus:latest
    command: "-config.file=/etc/prometheus/prometheus.yml -storage.local.path=/prometheus -storage.local.memory-chunks=10000 --alertmanager.url=http://alertmanager:9093"
    ports:
      - 9090:9090
    environment:
      no_proxy: "gateway"
    networks:
      - functions
    deploy:
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'

  zookeeper:
    image: confluentinc/cp-zookeeper:4.0.0
    hostname: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - streaming
    deploy:
       placement:
         constraints:
           - 'node.role == manager'
           - 'node.platform.os == linux'

  kafka:
    image: confluentinc/cp-kafka:4.0.0
    hostname: kafka
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_RESERVED_BROKER_MAX_ID=999999999
      - KAFKA_LOG_CLEANUP_POLICY=compact
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_NUM_PARTITIONS=20
    networks:
      - streaming
    deploy:
       placement:
         constraints:
           - 'node.role == manager'
           - 'node.platform.os == linux'

  kafka-rest:
    image: confluentinc/cp-kafka-rest:4.0.0
    hostname: kafka-rest
    environment:
      - ACCESS_CONTROL_ALLOW_ORIGIN_DEFAULT="*"
      - KAFKA_REST_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_REST_HOST_NAME=kafka-rest
      - KAFKA_REST_LISTENERS=http://kafka-rest:8082
      - KAFKA_REST_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
    ports:
      - 8082:8082
    networks:
      - streaming
    deploy:
       placement:
         constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
  
  schema-registry:
    image: confluentinc/cp-schema-registry:4.0.0
    hostname: schema-registry
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081
      - SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL=none
    ports:
      - '8081:8081'
    networks:
      - streaming
    deploy:
       placement:
         constraints:
           - 'node.role == manager'
           - 'node.platform.os == linux'

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.2
    environment:
      - KAFKA_REST_PROXY_URL=http://kafka-rest:8082
      - PROXY=true
    ports:
      - 8000:8000
    networks:
      - streaming
    deploy:
       placement:
         constraints:
           - 'node.role == manager'
           - 'node.platform.os == linux'
    
  bottledwater:
    image: mrkcse/bottledwater-pg:latest
    environment:
      - BOTTLED_WATER_ON_ERROR=exit
      - BOTTLED_WATER_SKIP_SNAPSHOT=false
      - BOTTLED_WATER_TOPIC_PREFIX=mrkcse
      - BOTTLED_WATER_OUTPUT_FORMAT=json
      - BOTTLED_WATER_BROKER=kafka:9092
      - BOTTLED_WATER_POSTGRES=postgres://postgres:postgres@postgres:5432/postgres
      - BOTTLED_WATER_SLOT=mrkcseslot
    networks:
      - streaming
    depends_on:
      - kafka
      - zookeeper
      - postgres
    entrypoint: /usr/local/bin/bottledwater-docker-wrapper.sh

    deploy:
       replicas: 1
       placement:
         constraints:
           - 'node.role == manager'
           - 'node.platform.os == linux'
  postgres:
    image: mrkcse/bottledwater-pg:latest
    hostname: postgres
    ports:
      - '5432:5432'

    networks:
      - streaming
    deploy:
       placement:
         constraints:
           - 'node.role == manager'
           - 'node.platform.os == linux'
networks:
  functions:
  streaming:
